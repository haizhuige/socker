<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liuhu.socket.dao.ShareInfoMapper">
    <resultMap id="BaseResultMap" type="com.liuhu.socket.entity.ShareInfo">
        <result column="share_code" property="shareCode" jdbcType="VARCHAR"/>
        <result column="share_name" property="shareName" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="CHAR"/>
        <result column="hushen_status" property="hushenStatus" jdbcType="CHAR"/>
    </resultMap>
    <insert id="insert" parameterType="com.liuhu.socket.entity.ShareInfo">
    insert into share_info (share_code, share_name, status,hushen_status
      )
    values (#{shareCode,jdbcType=VARCHAR}, #{shareName,jdbcType=VARCHAR}, #{status,jdbcType=CHAR},#{hushenStatus,jdbcType=CHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.liuhu.socket.entity.ShareInfo">
        insert into share_info
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="shareCode != null">
                share_code,
            </if>
            <if test="shareName != null">
                share_name,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="hushenStatus != null">
                hushen_status,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="shareCode != null">
                #{shareCode,jdbcType=VARCHAR},
            </if>
            <if test="shareName != null">
                #{shareName,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=CHAR},
            </if>
            <if test="hushenStatus != null">
                #{hushenStatus,jdbcType=CHAR},
            </if>
        </trim>
    </insert>
    <select id="getShareInfo"
            parameterType="com.liuhu.socket.entity.ShareInfo"
            resultMap="BaseResultMap">
        select share_code,share_name,status,hushen_status from share_info t
        where 1=1
        <if test="status != null">
            and t.status = #{status,jdbcType=CHAR}
        </if>
        <if test="shareCode != null">
            and t.share_code = #{shareCode,jdbcType=VARCHAR}
        </if>
    </select>
    <select id="getShareInfoWithoutASocker"
            parameterType="com.liuhu.socket.entity.ShareInfo"
            resultMap="BaseResultMap">
        select share_code,share_name,status,hushen_status from share_info t
        where  t.share_code != 'A00001'
             and status = #{status,jdbcType=CHAR}

             and t.share_code like '%${shareCode}%'
    </select>
    <select id="getRealTimeRateByWangyi"
            parameterType="com.liuhu.socket.entity.ShareInfo"
       resultType="java.lang.String" >
        select  GROUP_CONCAT(hushen_status,share_code) as shareCode from share_info t
        where
           status = #{status,jdbcType=CHAR}
          and t.share_code != 'A00001'
    </select>

    <select id="getRandomSocket" parameterType="integer" resultMap="BaseResultMap">

        select share_code,share_name  from share_info  ORDER BY RAND() limit #{count}

    </select>
    <select id="getRandomSocketByCondition" resultType="java.lang.String">
        SELECT
        sif.share_code
        FROM
        share_info sif,
        market_info_new mark
        WHERE
        SUBSTR( mark.share_code, 4, 6 ) = sif.share_code
        AND mark.date = ( SELECT MIN( date ) FROM market_info_new WHERE date >= #{startTimeDa} )
        AND mark.end_value <![CDATA[<=#{maxUnitPrice}]]>
        <choose>
            <when test="shareCodeList!=null">
                and sif.share_code in
                <foreach index="index" item="shareCode" collection="shareCodeList" open="(" close=")" separator=",">
                    #{shareCode}
                </foreach>
            </when>
            <otherwise>
                ORDER BY
                RAND()
                LIMIT #{maxCount}
            </otherwise>
        </choose>

    </select>
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liuhu.socket.dao.MarketInfoNewMapper">
    <resultMap id="BaseResultMap" type="com.liuhu.socket.entity.MarketInfoNew">
        <result column="id" property="id" jdbcType="INTEGER"/>
        <result column="share_code" property="shareCode" jdbcType="VARCHAR"/>
        <result column="open_value" property="openValue" jdbcType="DOUBLE"/>
        <result column="end_value" property="endValue" jdbcType="DOUBLE"/>
        <result column="rise_fall" property="riseFall" jdbcType="DOUBLE"/>
        <result column="rise_fall_ratio" property="riseFallRatio" jdbcType="DOUBLE"/>
        <result column="rise_fall_ratio_str" property="riseFallRatioStr" jdbcType="DOUBLE"/>
        <result column="highest" property="highest" jdbcType="DOUBLE"/>
        <result column="lowest" property="lowest" jdbcType="DOUBLE"/>
        <result column="deal_count" property="dealCount" jdbcType="INTEGER"/>
        <result column="deal_amount" property="dealAmount" jdbcType="DOUBLE"/>
        <result column="turn_over_rate" property="turnOverRate" jdbcType="DOUBLE"/>
        <result column="date" property="date" jdbcType="TIMESTAMP"/>
        <result column="share_name" property="shareName" jdbcType="VARCHAR"/>
    </resultMap>
    <insert id="insert" parameterType="com.liuhu.socket.entity.MarketInfoNew">
    insert into market_info_new (id, share_code, open_value, 
      end_value, rise_fall, rise_fall_ratio, 
      highest, lowest, deal_count, 
      deal_amount, turn_over_rate, date
      )
    values (#{id,jdbcType=INTEGER}, #{shareCode,jdbcType=VARCHAR}, #{openValue,jdbcType=DOUBLE}, 
      #{endValue,jdbcType=DOUBLE}, #{riseFall,jdbcType=DOUBLE}, #{riseFallRatio,jdbcType=DOUBLE}, 
      #{highest,jdbcType=DOUBLE}, #{lowest,jdbcType=DOUBLE}, #{dealCount,jdbcType=INTEGER}, 
      #{dealAmount,jdbcType=DOUBLE}, #{turnOverRate,jdbcType=DOUBLE}, #{date,jdbcType=TIMESTAMP}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.liuhu.socket.entity.MarketInfoNew">
        insert into market_info_new
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="shareCode != null">
                share_code,
            </if>
            <if test="openValue != null">
                open_value,
            </if>
            <if test="endValue != null">
                end_value,
            </if>
            <if test="riseFall != null">
                rise_fall,
            </if>
            <if test="riseFallRatio != null">
                rise_fall_ratio,
            </if>
            <if test="highest != null">
                highest,
            </if>
            <if test="lowest != null">
                lowest,
            </if>
            <if test="dealCount != null">
                deal_count,
            </if>
            <if test="dealAmount != null">
                deal_amount,
            </if>
            <if test="turnOverRate != null">
                turn_over_rate,
            </if>
            <if test="date != null">
                date,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="shareCode != null">
                #{shareCode,jdbcType=VARCHAR},
            </if>
            <if test="openValue != null">
                #{openValue,jdbcType=DOUBLE},
            </if>
            <if test="endValue != null">
                #{endValue,jdbcType=DOUBLE},
            </if>
            <if test="riseFall != null">
                #{riseFall,jdbcType=DOUBLE},
            </if>
            <if test="riseFallRatio != null">
                #{riseFallRatio,jdbcType=DOUBLE},
            </if>
            <if test="highest != null">
                #{highest,jdbcType=DOUBLE},
            </if>
            <if test="lowest != null">
                #{lowest,jdbcType=DOUBLE},
            </if>
            <if test="dealCount != null">
                #{dealCount,jdbcType=INTEGER},
            </if>
            <if test="dealAmount != null">
                #{dealAmount,jdbcType=DOUBLE},
            </if>
            <if test="turnOverRate != null">
                #{turnOverRate,jdbcType=DOUBLE},
            </if>
            <if test="date != null">
                #{date,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <insert id="insertOrUpdateMarketInfo" useGeneratedKeys="true" parameterType="java.util.List">
        replace into market_info_new
        (open_value, end_value,
        rise_fall, rise_fall_ratio, highest,
        lowest, date,share_code,deal_count,deal_amount,turn_over_rate,rise_fall_ratio_str)
        VALUES
        <foreach collection="list" item="it" separator=",">
            (#{it.openValue},#{it.endValue},#{it.riseFall},
            #{it.riseFallRatio},#{it.highest},#{it.lowest},
            #{it.date},#{it.shareCode},#{it.dealCount},#{it.dealAmount},#{it.turnOverRate},#{it.riseFallRatioStr})
        </foreach>
    </insert>
    <select id="queryMaxDate"
            resultType="java.util.Date">
        select max(date) as date  from market_info_new t where
        1=1
        <if test="shareCode!=null">
         and  t.share_code = '${shareCode}'
        </if>
    </select>

    <select id="queryPeriodRateByShareCode" parameterType="com.liuhu.socket.domain.input.MarketInput2Domain"
            resultType="map">

        select round(t1.netRadio,4) as netRatio,t2.share_name as shareName from
        (SELECT EXP( SUM( LN(( 1+rise_fall_ratio * 0.01 ))))-1 AS netRadio,share_code as shareCode
        FROM
        market_info_new
        WHERE
        date >= #{domain.startTimeDa}
        and
        date <![CDATA[<=#{domain.endTimeDa}]]>
        and SUBSTR(share_code,4,6) in
        <foreach index="index" item="shareCode" collection="domain.shareCodeList" open="(" close=")" separator=",">
            #{shareCode}
        </foreach>
        GROUP BY
        share_code) t1,
        share_info t2
        where SUBSTR(t1.shareCode,4,6) = t2.share_code
        order by t1.netRadio desc
    </select>

    <select id = "queryMarketInfoByParam" parameterType="com.liuhu.socket.domain.input.MarketDetailInputDomain" resultMap="BaseResultMap">
        SELECT
        mark.*,sif.share_name
        FROM
        market_info_new mark,share_info sif
        WHERE
        date >= #{startTimeDa}
        and
        date <![CDATA[<=#{endTimeDa}]]>
        and SUBSTR(mark.share_code,4,6) in
        <foreach index="index" item="shareCode" collection="shareCodeList" open="(" close=")" separator=",">
            #{shareCode}
        </foreach>
        and SUBSTR(mark.share_code,4,6) = sif.share_code
        and sif.status = 1
    </select>

    <select id="queryDistinctDate" resultType="date">
        select distinct date from market_info_new order by date
    </select>

    <select id="queryMaxAmount" resultType="java.lang.String">
        SELECT
	share_code
FROM
	market_info_new
WHERE
	date IN (
		SELECT DISTINCT
			max(date)
		FROM
			market_info_new
	)
AND deal_amount / turn_over_rate > 80000000
    </select>

    <select id="queryVRatioFromDownStartPoint" resultType="com.liuhu.socket.domain.output.QueryRecentSerialRedOutPutDTO">

         SELECT
        share_code AS shareCode,
        sumCount AS finalRatio,
        firstDate AS startTime
        FROM
        (
        SELECT
        mfn.id,
        mfn.share_code,
        rise_fall_ratio,
        mfn.date,
        sn.date as firstDate,
        COUNT(	CASE WHEN rise_fall_ratio > 0 THEN		1	END	) OVER (		PARTITION BY share_code,sn.date		              ORDER BY	mfn.date ROWS BETWEEN  4 PRECEDING	AND CURRENT ROW		) AS countUp,
        sum(rise_fall_ratio) over (	PARTITION BY share_code,sn.date	ORDER BY	mfn.date		) AS sumCount,
        row_number () over (	PARTITION BY share_code,sn.date	ORDER BY		sn.date	) AS rowhi
        FROM
        market_info_new mfn,
        (
        SELECT
        share_code,
        date
        FROM
        market_info_new tt
        WHERE
        (share_code, date) IN (

        SELECT DISTINCT
        share_code AS shareCode,
        (SELECT 	date	FROM	trade_date	WHERE		id = (	SELECT	id	FROM		trade_date	WHERE	date = kk.date) + 1) as date
        from
        (
        SELECT
        share_code,
        rise_fall_ratio,
        FIRST_value (rise_fall_ratio) over (
        PARTITION BY share_code
        ORDER BY
        date
        ) AS firstRatio,
        date,
        COUNT(
        CASE
        WHEN rise_fall_ratio > 0 THEN
        1
        END
        ) OVER (
        PARTITION BY share_code
        ORDER BY
        date ROWS BETWEEN 4 PRECEDING
        AND CURRENT ROW
        ) AS countUp,
        sum(rise_fall_ratio) over (
        PARTITION BY share_code
        ORDER BY
        date
        ) AS sumCount,
        FIRST_value(deal_amount/turn_over_rate) over(PARTITION by share_code ORDER BY date ) as amount,
        turn_over_rate
        from market_info_new tt
        where tt.share_code in (
        SELECT
        share_code
        FROM
        (select
        share_code,
        date,
        rise_fall_ratio,
        first_value(deal_amount)over(PARTITION by share_code ORDER BY date desc) as deal_amount,
        first_value(turn_over_rate)over(PARTITION by share_code ORDER BY date desc) as turn_over_rate
        from
        market_info_new
        where
        date >=  #{downStartTime,jdbcType=TIMESTAMP}
        AND date &lt; ( SELECT date FROM trade_date WHERE id = ( SELECT id FROM trade_date WHERE date =  #{downStartTime,jdbcType=TIMESTAMP}) + 10 )
        ) t2
        WHERE
         deal_amount /turn_over_rate >72000000
        GROUP BY share_code
        having count(CASE WHEN rise_fall_ratio &lt; 0  THEN 1 END) > #{minDownDay}
        and  SUM(rise_fall_ratio)&lt;#{minDownRate}
         )
        and tt.date >= (SELECT	date	FROM	trade_date	WHERE		id = (	SELECT	id	FROM		trade_date	WHERE	date = #{downStartTime,jdbcType=TIMESTAMP}) + #{periodDownDay,jdbcType=INTEGER})
        and tt.date &lt; (SELECT	date	FROM	trade_date	WHERE		id = (	SELECT	id	FROM		trade_date	WHERE	date = #{downStartTime,jdbcType=TIMESTAMP}) + #{periodDownDay,jdbcType=INTEGER}+#{periodUpDay,jdbcType=INTEGER})
        ) as kk
        WHERE
        countUp = #{minUpDay,jdbcType=INTEGER}
        AND rise_fall_ratio > 0
        AND firstRatio > 0
        AND amount > #{minMarketValue}
        and turn_over_rate >= #{minTurnOverRate,jdbcType=INTEGER}
        AND sumCount > #{minRate,jdbcType=INTEGER}
        and sumCount &lt;12

        ORDER BY
        share_code
        )
        ) sn
        WHERE
        mfn.share_code = sn.share_code
        AND mfn.date >= sn.date
        AND mfn.date &lt;= (
        SELECT
        date
        FROM
        trade_date
        WHERE
        id = (SELECT id	 FROM	trade_date	WHERE		date = sn.date ) +  #{recentRateDay}-1
        )
        ) kk
        WHERE
        kk.rowhi = #{recentRateDay}
    </select>

    <select id="queryMarketInfoByDate" resultType="com.liuhu.socket.entity.MarketInfoNew">
        SELECT
        share_code as shareCode,
        (select date from trade_date where id=(select id from trade_date where date= max(mm.date))+1) as date
        FROM
        (
        SELECT
        share_code,
        ROUND( end_value / ( 1+ rise_fall_ratio * 0.01 ), 2 ) AS preendvalue,
        highest,
        open_value,
        rise_fall_ratio,
        date
        FROM
        market_info_new
        WHERE
        date >= #{condition.startTime}
        AND date &lt;= (select date from trade_date where id=(select id from trade_date where date= #{condition.startTime})+1)
        and deal_amount/turn_over_rate > #{condition.minMarketValue}
        ) mm
        WHERE
        highest - preendvalue &lt; 0
        GROUP BY
        share_code
        HAVING
        count( share_code ) = #{condition.minDownDay}
    </select>
    <select id="querySerialRedFiveInfoByDate" resultType="com.liuhu.socket.entity.MarketInfoNew">
       select share_code as shareCode,t.date as date,turn_over_rate as turnOverRate from  market_info_new t,
        (SELECT
        share_code as shareCode,
	   max(date) as date
        FROM
        market_info_new
        WHERE
        deal_amount / turn_over_rate > #{condition.minMarketValue}
        and
        turn_over_rate &lt;= #{condition.minTurnOverRate}
        and date >= #{condition.startTime}
        and date &lt;= (select date from trade_date where id =(select id from trade_date where date = #{condition.startTime})+#{condition.minUpDay}-1)
        and rise_fall_ratio >0
        GROUP BY
        share_code
        HAVING count(share_code) = #{condition.minUpDay}) t2
        where t.share_code = t2.shareCode
          and t.date =t2.date
    </select>
    <select id="queryThreeDownThen" resultType="com.liuhu.socket.domain.output.QueryRecentSerialRedOutPutDTO">

        select
           tt.share_code as shareCode,
           tt.rise_fall_ratio as finalRatio,
           round((highest - ROUND(tt.end_value/(1+tt.rise_fall_ratio*0.01),3))/(ROUND(tt.end_value/(1+tt.rise_fall_ratio*0.01),3))*100,2) as maxRatio,
           round((lowest - ROUND(tt.end_value/(1+tt.rise_fall_ratio*0.01),3))/(ROUND(tt.end_value/(1+tt.rise_fall_ratio*0.01),3))*100,2) as minRatio,
           round((open_value - ROUND(tt.end_value/(1+tt.rise_fall_ratio*0.01),3))/(ROUND(tt.end_value/(1+tt.rise_fall_ratio*0.01),3))*100,2) as openRatio,
           round(deal_amount/(turn_over_rate*10000000),2) as marketValue,
           deal_amount  as dealAmount,
           tt.date as startTime
      from market_info_new tt
    where 1=1
      <if test="date!=null">
       and  date = #{date}
      </if>
        and share_code in
        <foreach index="index" item="shareCode" collection="shareCodeList" open="(" close=")" separator=",">
          #{shareCode}
        </foreach>
        <if test="input2Domain !=null and input2Domain.startTime!=null">
            and date>=#{input2Domain.startTime}
        </if>
        <if test="input2Domain !=null and input2Domain.endTime!=null">
            and date&lt;=#{input2Domain.endTime}
        </if>

    </select>
    <select id="queryHeadRatioShareInfo"
            resultType="com.liuhu.socket.domain.output.QueryRecentSerialRedOutPutDTO">
        SELECT
	share_code as shareCode,
	rise_fall_ratio as maxRatio,
	turn_over_rate as turnOverRate
FROM
	market_info_new
WHERE
	date = #{inputDTO.queryStartTime}
    <if test="inputDTO.dealAmount!=null">
        and  deal_amount > #{inputDTO.dealAmount}
    </if>

and rise_fall_ratio >= #{inputDTO.minDownRate}
AND share_code IN (
	SELECT
		CONCAT('cn_', share_code) AS share_code
	FROM
		share_info
	WHERE
		hushen_status = #{inputDTO.hushenStatus}
) ORDER BY rise_fall_ratio desc

    </select>

    <select id ="querySerialDownNext" resultType="com.liuhu.socket.domain.output.QueryRecentSerialRedOutPutDTO">
        select open_ratio as openRatio,
                max_ratio as maxRatio,
                min_ratio as minRatio,
                share_code as shareCode,
                final_ratio as finalRatio,
                start_time as startTime,
                market_value as marketValue,
                deal_amount as dealAmount
          from serial_temp where up_period_count in
        (select SUBSTR(share_code,4) as shareCode from
        (SELECT
        *, round(end_value / (1 + rise_fall_ratio * 0.01),3) AS lastEndValue,
        COUNT(	CASE WHEN round(end_value / (1 + rise_fall_ratio * 0.01),3) > highest THEN		1	END	) OVER (		PARTITION BY share_code	ORDER BY			date ROWS BETWEEN 2 PRECEDING	AND CURRENT ROW) AS countUp
        FROM
        market_info_new tt
        WHERE
        date &lt;= #{date}
        and SUBSTR(tt.share_code,4) in (select share_code from share_info where hushen_status = 'B')
        AND date > (select date from trade_date tt where tt.id = (select id from trade_date where date = #{date})-2)
        and round(end_value / (1 + rise_fall_ratio * 0.01),2)>highest) kk where kk.countUp = 2 )
        and start_time = (select date from trade_date tt where tt.id = (select id from trade_date where date =#{date})+1)    ORDER BY share_code,start_time desc
    </select>

</mapper>
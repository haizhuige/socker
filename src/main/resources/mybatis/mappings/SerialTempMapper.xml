<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liuhu.socket.dao.SerialTempMapper">
    <resultMap id="BaseResultMap" type="com.liuhu.socket.domain.output.QueryRecentSerialRedOutPutDTO">
        <result column="id" property="id" jdbcType="BIGINT"/>
        <result column="share_code" property="shareCode" jdbcType="VARCHAR"/>
        <result column="max_ratio" property="maxRatio" jdbcType="DECIMAL"/>
        <result column="min_ratio" property="minRatio" jdbcType="DECIMAL"/>
        <result column="final_ratio" property="finalRatio" jdbcType="DECIMAL"/>
        <result column="start_time" property="startTime" jdbcType="DATE"/>
    </resultMap>


    <insert id="insertList" parameterType="java.util.List">
        insert into serial_temp(share_code,max_ratio,min_ratio,final_ratio,start_time,up_period_count) VALUES
        <foreach collection="list" item="item" separator=",">
         (#{item.shareCode},#{item.maxRatio},#{item.minRatio},#{item.finalRatio},#{item.startTime},#{hi})
        </foreach>
    </insert>

    <select id="getResultByCondition" parameterType="com.liuhu.socket.dto.QueryRecentSerialRedConditionDO" resultType="com.liuhu.socket.domain.output.QueryRecentSerialRedOutPutDTO">
        select share_code as shareCode,
                max_ratio as maxRatio,
                min_ratio as minRatio,
                final_ratio as finalRatio,
                start_time as startTime,
                up_period_count as upPeriodCount
                  from serial_temp
                  where 1=1
                  <if test="selectStartTime !=null">
                      and start_time >=#{selectStartTime}
                  </if>
                  <if test="selectEndTime !=null">
                      and start_time &lt;=#{selectEndTime}
                  </if>
                  <if test="shareCodeList !=null">
                      and share_code in
                      <foreach collection="shareCodeList" index="i" item="item" open="(" close=")" separator=",">
                          #{item}
                      </foreach>
                  </if>

    </select>

    <select id="getRecentFinalRatioRedThree"  resultType="com.liuhu.socket.domain.output.QueryRecentSerialRedOutPutDTO">
        SELECT
        share_code AS shareCode,
        sumCount AS finalRatio,
        firstDate AS startTime
        FROM
        (
        SELECT
        *, row_number () over (
        PARTITION BY share_code,firstDate
        ORDER BY
        firstDate
        ) AS rowNum
        FROM
        (
        -- 查询满足条件的购买日期开始日期到规定购买的结束日期数据 开始
        SELECT
        mfn.id,
        mfn.share_code,
        rise_fall_ratio,
        mfn.date,
        sn.date as firstDate,
        COUNT(	CASE WHEN rise_fall_ratio > 0 THEN		1	END	) OVER (		PARTITION BY share_code,sn.date		ORDER BY			mfn.date ROWS BETWEEN 2 PRECEDING	AND CURRENT ROW		) AS countUp,
        sum(rise_fall_ratio) over (	PARTITION BY share_code,sn.date	ORDER BY	mfn.date		) AS sumCount,
        row_number () over (	PARTITION BY share_code,sn.date	ORDER BY		sn.date	) AS rowhi
        FROM
        market_info_new mfn,
        (
        -- 根据传入的code 和date  作为一个查询结果集  开始
        SELECT
        share_code,
        date
        FROM
        market_info_new tt
        WHERE
        (share_code, date) IN (

        <foreach collection="list" index="i" item="item" separator=",">
            (
            #{item.shareCode},
            #{item.startTime}
            )
        </foreach>

        )
        -- 根据传入的code 和date  作为一个查询结果集  结束
        ) sn
        WHERE
        mfn.share_code = sn.share_code
        AND mfn.date >= sn.date
        AND mfn.date &lt;= (
        SELECT
        date
        FROM
        trade_date
        WHERE
        id = (SELECT id	FROM	trade_date			WHERE		date = sn.date ) +  #{input.recentRateDay}- 1
        )
        -- 查询满足条件的购买日期开始日期到规定购买的结束日期数据 结束
        ) kk
        WHERE
        -- 条件  取连红三天的记录 或者 或者是没有三连红到最后购买截止期限的
        (kk.rowhi = #{input.minUpDay} AND kk.countUp = #{input.minUpDay})
        OR (kk.rowhi = #{input.recentRateDay} AND kk.countUp &lt;= #{input.minUpDay})
        ) AS mf
        WHERE
        rowNum = 1
    </select>
</mapper>